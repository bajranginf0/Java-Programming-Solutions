Q1)Insert elements in an array dynamically.
      
                Scanner sc = new Scanner(System.in);
		System.out.println("Enter array size : ");
		int size = sc.nextInt();
		int[] values = new int[size];
		System.out.println("Enter " + size + " elements :");
		for (int i = 0; i < values.length; i++) { //4
			values[i] = sc.nextInt(); 
		}


Q2)Find Minimum Element in an Array.
   public static void findMin(int[] a) {  
          int min = a[0];
		  for(int i = 1;i<a.length;i++){
              if(min>a[i]) {
				  min = a[i];
				  }
		  }
		  System.out.println("The min element is :" +min);
	}


Q3)Find maximum element in an array.
   ublic static void findMax(int[] a) {  
          int max = a[0];
		  for(int i = 1;i<a.length;i++){
              if(max<a[i]) {
				  max = a[i];
				  }
		  }
		  System.out.println("The max element is :" +max);
	}


Q4) and Q5)Calculate Sum of Array Elements and Find Average of Array Elements.
   public static void sumAndAverage(int[] a) {
		int sum = 0;
		for (int i = 0; i < a.length; i++) {
			sum += a[i];
		}
		System.out.println("Sum is : " + sum);
		System.out.println("Average is : " + ((double) sum / a.length));
	}


Q6)Search for a given Element in an Array.
  Ans :
  public static void findElement(int[] a,int element) {
		boolean flag = false;    
		for(int i = 0;i<a.length;i++) {
			if(a[i]==element) {
				flag = true;
				break;
			}	
		}
		if(flag) System.out.println("Element is available...");
		else System.out.println("Element is not available...");
		
	}

Q7)Search for a given Element in an Array if present print its location.
  Ans : 
  public static void findElementPosition(int[] a,int ele) {
		boolean status = false;
		for (int i = 0; i < a.length; i++) {
			if(a[i]==ele) {
				System.out.println("Element "+ele+" present at "+i);
				status = true;
				//break;
			}
		}
		if(!status) System.out.println("Element is not available...");
	}


Q9)Find median of an array.
   Test Case : 1
  ----------------
   Array size : 5
   Elements are : 1, 2, 3, 4, 5
   Median is : 3

    Test Case : 1
  ----------------
   Array size : 6
   Elements are : 1, 2, 3, 4, 5, 6
   Median is : 3.5

Ans : 
public static void findMedian(int[] a) { //Array must be sorted
		if(a.length%2!=0)
		System.out.println("Median of array is "+a[a.length/2]);
		else  {
			double median = (a[a.length/2] + a[(a.length/2) -1])/2.0;
			System.out.println("Median is "+median);
		}
	}
   
Q10)Reverse the array and print it.
   Ans : 
   public static void reverseAndPrint(int[] a) {
		System.out.println("Reverse order : ");
		for (int i = a.length - 1; i >= 0; i--) { 			    			System.out.print(a[i] + " ");
		} 

		for (int i = 0; i < a.length / 2; i++) { 			
		        int temp = a[i];
			a[i] = a[a.length - 1 - i];
			a[a.length - 1 - i] = temp;
		}
		System.out.println();
		printArray(a);
	}
   public static void printArray(int[] a) {// a = 1010
		System.out.println("Array elements are : ");
		for (int i = 0; i < a.length; i++) {
			System.out.print(a[i] + " ");
		}
		System.out.println();
	}
Q10)Check the given array is sorted or not.


Ques - 11
------------
Write a java program to count how many elements are present more than one time.

Input  : arr = [1,2,1,3,4,6,2,5,4]
Output : 3 elements are present more than one time 

Ans : 
public static void countDuplicate(int[] a) {   
		int numebrOfDuplicate = 0; 
		for (int i = 0; i < a.length-1; i++) {
			int count = 1;
			for (int j = i+1; j < a.length; j++) {
				if (a[i] == a[j])
					count++;
			}
			if (count == 2)
				numebrOfDuplicate++;

		}
		System.out.println("Count of Duplicate is :"+ numebrOfDuplicate);

	}


Ques - 12
--------------
Write a java program to count number of unique elements present in an array
Input : arr = [1,2,7,1,4,3,5,4,6,3]
Output : 3

public static void countUniques(int[] a) {   
		int uniquesCOunt = 0; 
		for (int i = 0; i < a.length; i++) {
			int count = 0;
			for (int j = 0; j < a.length; j++) {
				if (a[i] == a[j])
					count++;
			}
			if (count == 1)
				uniquesCOunt++;

		}
		System.out.println("Count of unique is :"+ uniquesCOunt);

	}


Ques - 13
------------
Write a java program to print all duplicate elements from a given array.
Input  : arr = [1,2,1,3,4,6,2,5,4]
Output : 1 2 4 
Ans :
public static void findDuplicates(int[] a) {
		System.out.println("Duplicate elements are : ");
		for(int i = 0;i<a.length-1;i++) {
			int c = 1;
			for(int j = i+1;j<a.length;j++) {
				if(a[i] == a[j]) c++;
			}
			if(c==2) System.out.print(a[i] +" ");
		}
		
	}


Ques - 14
------------
Write a java program to print all unique elements from a given array.
Input  : arr = [1,2,1,3,4,6,2,5,4]
Output : 3 6 5
Ans : 
public static void findUnique(int[] a) {
		System.out.println("Unique elements are : ");
		for(int i = 0;i<a.length-1;i++) {
			int c = 0;
			for(int j = 0;j<a.length;j++) {
				if(a[i] == a[j]) c++;
			}
			if(c==1) System.out.print(a[i] +" ");
		}
		
	}




Ques - 15
------------
Write a Java method named modifyArrayElement that modifies the given array by replacing every occurrence of oldElement with newElement.

arr = [1, 2, 3, 4, 5, 2, 3]
oldElement = 3
newElement = 10

After modification, arr should be [1, 2, 10, 4, 5, 10]

Ans : 
public static void replaceAll(int[] a, int oldElement, int newElement) {
		for (int i = 0; i < a.length; i++) {
			if (a[i] == oldElement) {
				a[i] = newElement;
			}
		}
		System.out.println("After replacing array is : ");
		printArray(a);
	}


Ques - 16
------------
Write a Java method named replaceElement that replaces the element at the given position in the array with another given element.

Input:
arr = [1, 2, 3, 4, 5]
position = 2
newElement = 10

After modification, arr should be [1, 2, 10, 4, 5]

Ans :
public static void insertElementAtIndex(int[] a,int index,int newElement ) {
		a[index] = newElement;
		System.out.println("After inserting new element : ");
		printArray(a);
	}



Ques - 17
------------
Write java method named findEvenandOddPositionElement that print all the elements which is present at even index.

Ans :
public static void printOddAndEvenIndexELement(int[] a) {
		System.out.println("Even index elements :");
		for(int i = 0;i<a.length;i++) {
			if(i%2==0) System.out.print(a[i] +" ");
		}
		System.out.println("Odd index elements :");
		for(int i = 0;i<a.length;i++) {
			if(i%2!=0) System.out.print(a[i] +" ");
		}
	}



Ques - 18
-----------
Write java method named findSumOfOddandEvenPositionElement that print the all odd positions sum and also even
position sum.


public static void printOddAndEvenIndexELementSum(int[] a) {
		int eSum = 0;
		for(int i = 0;i<a.length;i++) {
			if(i%2==0) eSum+=a[i];
		}
		System.out.println("Even index elements sum  :"+eSum);
		int oSum = 0;
		for(int i = 0;i<a.length;i++) {
			if(i%2!=0) oSum+=a[i];
		}
		System.out.println("Odd index elements sum :" +oSum);
	}

Ques - 19
-------------
Write java method named findPrimePositionElement that print all the elements which is present at prime index.
public static void printPrimePositionElement(int[] a) {
		for(int i = 0;i<a.length;i++) {
			int c = 0;
			for(int j = 1;j<=i;j++) {
				if(i%j==0) c++;
			}
			if(c==2) System.out.print(a[i] +" ");
		}
	}

Ques - 20
-------------
Implement a Java program to find the frequency of each element in an integer array and display the results.
public static void findFrequency(int[] a) {
		
	     // Replacing duplicate elements 
             for(int i = 0;i<a.length;i++) {
                 int count = 1;
		 for(int j = i+1;j<a.length;j++) { 
                    if(a[i] == a[j]) { 
                       count++; 
                       a[j] = -1;
                    } 
                  }
		    if(a[i]!=-1) { 
                    System.out.println(a[i] +" : "+count); 
                    } 
                  }
		 
		 // Without replacing the elements 
                    boolean[] arr = new boolean[a.length];  
		    for (int i = 0; i < a.length; i++) { 		 
                       count = 1; 
                       if (arr[i]) continue;
                       for (int j = i + 1; j < a.length;j++) { 
                         if (a[i] == a[j]) { 
                            count++;
                            arr[j] = true;
                         } 
                       } 
		     System.out.println(a[i] + " : " + count);
		  
		  }

                //Without replacing and without creating new array
		for (int i = 0; i < a.length; i++) {
			int c = 1, v = 0;
			for (int j = 0; j < a.length; j++) {
				if (a[i] == a[j] && i < j)
					c++;
				if (a[i] == a[j] && i > j)
					v++;
			}
			if (v == 0 && c%2==0) {
				System.out.println(a[i] + " : " + c);
			}
		}

	}
    

Ques - 21
--------------
Implement a java program to find kth largest element in an unsorted array.

Example  :
nums[] = { 4, 8, 10,10, 1, 12, 5,8 };
rank = 3;

Output : 3rd largest element is 8.

package com.nit.batch29.array;

public class ArrayProgram_30_03 {
	public static void findKthLargest(int[] a, int rank) {
		int min = a[0], max = a[0];
		for(int i = 0;i<a.length;i++) {
			if(min>a[i]) min = a[i];
			if(max<a[i]) max = a[i];
		}
		int count = 0;
		for (int i = max; i >= min; i--) {
			for (int j = 0; j < a.length; j++) {
				if (i == a[j]) {
					count++;
					break;
				}
			}
			if (count == rank) {
				System.out.println(rank + " largest is : " + i);
			     break;
			}
		}
	}

	public static void printArray(int[] a) {
		for (int i = 0; i < a.length; i++) {
			System.out.print(a[i] + " ");
		}
		System.out.println();
	}

	public static void main(String[] args) {
		int[] nums = { 4, 8, 10,10, 1, 12, 5,8 };
		int rank = 3;
		printArray(nums);
		findKthLargest(nums, rank);

	}
}


Ques - 22
------------
Write a Java program to find all pairs in an array of integers whose sum is equal to a given target value.print those pairs.
Example : 
arr = {1,2,5,11,4,11,5,10,14,18,13,9,6}
target = 15

Output:
(1,14)
(2,13)
(5,10)
(11,4)
(9,6)
public static void findPairs(int[] arr, int target) {
		  for (int i = 0; i < arr.length - 1; i++) {
	              boolean skip = false;
	            for (int k = 0; k < i; k++) {
	                if (arr[k] == arr[i]) {
	                    skip = true;
	                    break;
	                }
	            }
	            if (skip) {
	                continue;
	            }
	            for (int j = i + 1; j < arr.length; j++) {
	                if (arr[i] + arr[j] == target) {
	                    System.out.println("(" + arr[i] + ", " + arr[j] + ")");
	                }
	            }
	        }
	}

Ques - 23
------------
Given a sorted array of integers, remove duplicates such that each element appears only once. Return the resulting array without duplicates.

Input:
nums = [1, 1, 2, 2, 3, 4, 4, 5]
Output:
[1, 2, 3, 4, 5]

	public static int[] removeDuplicate(int[] a) {
		int index = 0;
		for (int i = 1; i < a.length; i++) {
			if (a[index] != a[i]) {
				index++;
				a[index] = a[i];
			}
		}
		int[] res = new int[index + 1];
		for (int i = 0; i < res.length; i++) {
			res[i] = a[i];
		}
		return res;
	}
Ques - 24
------------
Write a program to merge two sorted arrays into a single sorted array.
Input:
nums1 = [1, 3, 5]
nums2 = [2, 4, 6]
Output:
[1, 2, 3, 4, 5, 6]
package com.nit.batch29.array;

public class ArrayProgram_30_03 {
	
	public static void merge(int[] num1, int[] num2,int[] a)
	{
		//Copying elements from num1      
		int index = 0;//3
		for(int i = 0;i<num1.length;i++) {
			a[index] = num1[i];   
			index++;
		}
		//Copying elements from num2
		for(int i = 0;i<num2.length;i++) {
			a[index] = num2[i];
			index++;
		}
	}
	public static void sort(int[] num3) {
		for(int i = 0;i<num3.length;i++) {
			for(int j = 0;j<num3.length-1-i;j++) {
				if(num3[j]>num3[j+1]) {
					int temp = num3[j+1];
					num3[j+1] = num3[j];
					num3[j] = temp;
				}
			}
		}
	}
	public static void printArray(int[] a) {
		for(int i = 0;i<a.length;i++) {
			System.out.print(a[i]+" ");
		}
		System.out.println();
	}

	public static void main(String[] args) {
		int[] num1 = {3,2,5};
		int[] num2 = {4,2,3,1,6};
		
		int[] num3 = new int[num1.length+num2.length];
		merge(num1,num2,num3);
	     printArray(num3);
	     sort(num3);
	     printArray(num3);
	     	

	}
}


Ques - 25
-------------
You are given an array of integers and a number of steps. Implement a function to rotate the array to the right by the given number of steps.

Input:
nums = [1, 2, 3, 4, 5] 
steps = 2
Output:
[4, 5, 1, 2, 3]
package com.nit.batch29.array;

public class ArrayProgram_30_03 {

	public static void shiftingSteps(int[] a, int steps) {
		printArray(a);
		for (int i = 0; i < steps; i++) {		
 	           int temp = a[a.length - 1];
			for (int j = a.length - 1; j > 0; j--) { 
				a[j] = a[j - 1]; 
			}
			a[0] = temp;
		}
		printArray(a);
	}

	public static void printArray(int[] a) {
		for (int i = 0; i < a.length; i++) {
			System.out.print(a[i] + " ");
		}
		System.out.println();
	}

	public static void main(String[] args) {
		shiftingSteps(new int[] {5,6,7,8,9},2);
	}
}
}

Ques - 26
----------------
You are given an array containing n-1 unique integers in the range from 1 to n. There is exactly one integer missing. Write a method to find and return the missing integer.

Input:
nums = [1, 2, 4, 5, 6]
Output: 3

package com.nit.batch29.array;

public class ArrayProgram_30_03 {
     public static void findMissingElement(int[] a) {
    	 printArray(a);
    	 int index = 0;
    	 for(int i = a[0];i<a[a.length-1];i++) {
    		 if(i!=a[index++]) { 
    			 System.out.println("Missing number is :"+i);
    			 break;
    		 }
    	 }
     }
	

	public static void printArray(int[] a) {
		for (int i = 0; i < a.length; i++) {
			System.out.print(a[i] + " ");
		}
		System.out.println();
	}

	public static void main(String[] args) {
		findMissingElement(new int[] {5,6,7,9,10});
	}
}

Ques - 27
-------------
You are given an array containing n-1 unique integers in the range from 1 to n. There may be one or more integers missing from the array. Write a method to find and return all missing integers.

Example:
Input:
nums = [1, 2, 4, 7, 19]
Output:
[3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]

package com.nit.batch29.array;

public class ArrayProgram_30_03 {
     public static void findMissingElements(int[] a) {
    	 printArray(a);  
    	 for (int i = 0; i < a.length-1; i++) { 
 			for(int j = a[i];j<a[i+1];j++) {
 				if(a[i]!=j) {
 					System.out.print(j+" ");
 				}
 			}
 		}
    	 
     }
	

	public static void printArray(int[] a) {
		for (int i = 0; i < a.length; i++) {
			System.out.print(a[i] + " ");
		}
		System.out.println();
	}

	public static void main(String[] args) {
		findMissingElements(new int[] {5,8,10,15,20});
	}
}
Ques - 28
-------------
Write a java program to count and print all the elements which contains 2 in it.
Input as : {1,12,32,44,222,102,34,56,67,125}
Output as : 12, 32, 222, 102, 125
Count is : 5

package com.nit.batch29.array;

public class ArrayProgram_30_03 {
     public static void findElementContains2(int[] a) {
    	 printArray(a);
    	 int count = 0;
    	 for(int i = 0;i<a.length;i++) {
    		 int temp = a[i];
    		 while(temp!=0) {
    			 if(temp%10==2) {
    				 System.out.print(a[i]+" ");
    				 count++;
    				 break;
    			 }
    			 temp/=10;
    		 }
    		 
    	 }
    	 System.out.println("Count of elements : "+count);
     }
	
	public static void printArray(int[] a) {
		for (int i = 0; i < a.length; i++) {
			System.out.print(a[i] + " ");
		}
		System.out.println();
	}

	public static void main(String[] args) {
		findElementContains2(new int[] {1,22,302,34,222,102,121,67,56,2});
	}
}


Ques - 29
------------
Write a java program to insert a element in its proper position
in a given sorted array.
Example : 
Input as : {5,6,14,17,44}
Element to be inserted : 15
Result array : 5,6,14,15,17,44

Ques - 30
------------
Write a java program to shift all the zeros to the end of the given array without changing the order of non-zero elements.
Input as : {1,0,0,4,5,0,0,1};
Output as : {1,4,5,1,0,0,0,0}

Ques - 31
--------------
Write a java program to shift all the zeros to the fromt of the given array without changing the order of non-zero elements.
Input as : {1,0,0,4,5,0,0,1};
Output as : {0,0,0,0,1,4,5,1}










